
NAME= Почта-прием КТЛ по ПРОДАЖНОМУ КОДУ, сворачивая товарные строки
ВЕРСИЯ = 3

// Свернутый прием кассовый ленты по продажному коду с группировкой по
// цене и продажному коду.

//                          Параметры:
// КЛАСС_ДОКУМЕНТОВ       - тип создаваемых документов (РТ|ПТ и т.д.)
// ACPT_REG_TOTAL         - режим акцепта итоговых докумета(ов):
//                          -1 - не акцептовать;
//                           0 - акцепт стандартный;
//                           1 - акцептовать только строки;
//                           null (не определен) - акцепт стандартный.
// Ввести новые параметры:
// ACPT_REG_NOW           - режим акцепта текущих докумета(ов):
//                          -1 - не акцептовать;
//                           0 - акцепт стандартный;
//                           1 - акцептовать только строки;
//                           null (не определен) - акцепт стандартный.
// ФОРМ_БУХ_ДОК=Y|N       - формировать/не формировать бухгалтерские документы

//При приеме И смены при наличии ошибки файл удаляется из TMP, но не уда-
//ляется из KAS, а пр отсутствии ошибки и из TMP и из KAS. Документ создается
//независимо от наличия ошибки.
//При приеме Т смены, независимо от наличия ошибки, файл удаляется и из TMP и
//из KAS. Документ создается независимо от наличия ошибки.
//
//При приеме И смены, независимо от наличия ошибок, удаляются "АНАЛОГИ" и
//создаются новые документы.
//При приеме Т смены, независимо от наличия ошибок, если существует "АНАЛОГ"
//для данного подразделения и операции, то к нему добавляются новые чеки,
//иначе для данного подразделения и операции создается новый документ. Для
//ускорения работы можно запоминать кол-во уже принятых строк или № последнего
//принятого чека. Ввести параметр 'Тип смены' (ИТОГОВАЯ|ТЕКУЩАЯ).
//
//И и Т смены могут иметь разные режимы акцепта.
//
//Вывод:
//Прием И и Т смен отличается:
// - алгоритмом удаления файла;
// - алгоритмом добавления строк (в новый документ или в существующий)
// - режимом акцепта.
// Все остальные операции остаются без изменений.



Integer  Tr, Cr,
         НаличиеОшибки,
         КоличПопыток=20,
         АкцептСтроки,
         АкцептСтрокиИтог,
         АкцептСтрокиТек,
         АкцептДокумента,
         АкцептДокументаИтог,
         АкцептДокументаТек,
         Счетчик,
         FlagComplete,
         КолЦен,
         ФайлДата,
         ВалютаТип,
         ОбработаноСтрок,
         ПропуститьСтрок,
         КоличествоЦен,
         i,
         ВидОкр=3,
         БАЗОВАЯ_ВАЛЮТА_КАССЫ;

String   Склад,
         Операция,
         ДокументОперация,
         ДокументТип,
         КодВалютыКассы,
         ВалютаКод,
         ТоварКод,
         ТипСообщения,
         ПолныйКодПартнера,
         КлассДокументов,
         s,
         ФОРМ_БУХ_ДОК,
         ПодразделениеКасса = 'ГК',
         ТипДокументКассаРеализация,
         ОперДокументКассаРеализация  = '01',
         ТипДокументКассаВозврат,
         ОперДокументКассаВозврат  = '03',
         ПодразделениеБанк  = 'РС1',
         ТипДокументБанкРеализация,
         ОперДокументБанкРеализация   = '01',
         ТипДокументБанкВозврат,
         ОперДокументБанкВозврат   = '03',
         FileName;

real     ЦенаБазУе,
         ЦенаУе,
         ЦенаРуб,
         Количество,
         Количество_Ч,
         ШтрихКодКоэф,
         ВалютаСумма,
         СуммаВалюты;

real     Дата, Время;

string   Контрагент,
         Сопр_Док,
         Имя_документа,
         ДокументНомер,
         Номер_Чека,
         КлючевоеПоле,
         Штрихкод,
         ПочтовыйЯщик,
         ФайлИмя;

string   МастерСклад,
         МастерТип,
         МастерНомер,
         МастерОперация,
         ПодчНомер;
String ПартионнаяКарточка;
Число  ЦенаВрем;
Table Список_Файлов unique  //файлы для приема
(Список_Файлов.Начало
  (Список_Файлов.Файл
     Fields +ФайлДата,
            +ФайлИмя,
             НаличиеОшибки
  )
Список_Файлов.Файл.Итого);

table СписокДокументов unique //документы - "АНАЛОГИ" по смене
(СписокДокументов.Склад
  fields +Склад,
         +ДокументТип,
         +ДокументОперация
  (СписокДокументов.Документ
    fields ДокументНомер
  )
СписокДокументов.Склад.Итого);

table КТЛ balance unique //сгруппированная ККЛ
(КТЛ.Заголовок
 (КТЛ.Начало
   поля +Сопр_Док,
         Дата,
         Время,
         Имя_документа,
         ПолныйКодПартнера,
         ФайлИмя
  (КТЛ.ПОДРАЗДЕЛЕНИЕ
     поля +Склад
     (КТЛ.ОПЕРАЦИЯ
        поля +Операция
        (КТЛ.ТОВАР
           поля +ТоварКод
           (КТЛ.КЛЮЧЕВОЕПОЛЕ
              поля +Штрихкод,   //ТОВАР.ШТРИХКОД&'#'&ТОВАРЦЕНА
//                   +СтрокаЦен
                   +ЦенаБазУе,
                   +ЦенаУе,
                   +ЦенаРуб
              (КТЛ.ТОВАРКОЛИЧЕСТВО
                 поля Количество_Ч
              )
            КТЛ.ИтогоПоКлючевомуПолю)
         КТЛ.ИтогоПоТовару)
      КТЛ.ИтогоПоОперации)
   КТЛ.ИтогоПоПодразделению)
 КТЛ.Итого)
КТЛ.Итог);

table Строки balance //товарные строки ККЛ
(Строки.Строка
    поля +ТоварКод,
          Штрихкод,
          ЦенаБазУе,
          ЦенаУе,
          ЦенаРуб,
          Количество
);

table СуммыПоВалютам unique //суммы по валютам
(СуммыПоВалютам.Начало
  (СуммыПоВалютам.Операция
    поля +Операция
    (СуммыПоВалютам.КодВалюты
       поля +ВалютаКод,
            +ВалютаТип,
             КодВалютыКассы
      (СуммыПоВалютам.Сумма
        поля ВалютаСумма
      )
    СуммыПоВалютам.КодВалютыИтого)
  СуммыПоВалютам.ОперацияИтого)
СуммыПоВалютам.Итого);


Table DelFiles
(DelFiles.File
   Fields
     ФайлИмя);



//==========================
setarg('MAIL_ACT',1);
ФОРМ_БУХ_ДОК='Y';
//==========================
if ARG('БАЗОВАЯ_ВАЛЮТА_КАССЫ') > ''
 БАЗОВАЯ_ВАЛЮТА_КАССЫ=ARG('БАЗОВАЯ_ВАЛЮТА_КАССЫ');
else
 БАЗОВАЯ_ВАЛЮТА_КАССЫ=ARG('РУБ');
         ТипДокументКассаРеализация   = ARG('ПКО.ТИП');
         ТипДокументБанкРеализация    = ARG('ПОСТУПЛЕНИЕ_НА_РС.ТИП');
         ТипДокументКассаВозврат   = ARG('РКО.ТИП');
         ТипДокументБанкВозврат    = ARG('ПЛАТ_ПОР.ТИП');

case arg('ACPT_REG_TOTAL')
{
 of -1:
         АкцептСтрокиИтог    = 0; //согласно настройке операции
         АкцептДокументаИтог =-1; //не акцептуется
 of  0:
         АкцептСтрокиИтог    = 0; //согласно настройке операции
         АкцептДокументаИтог = 0; //стандартный акцепт
 of  1:
         АкцептСтрокиИтог    = 1; //акцептуется всегда
         АкцептДокументаИтог =-1; //не акцептуется
 else    //если не указан(указан неверно) ACPT_REG..., то стандартный акцепт
         АкцептСтрокиИтог    = 0; //согласно настройке операции
         АкцептДокументаИтог = 0; //стандартный акцепт
}

case arg('ACPT_REG_NOW')
{
 of -1:
         АкцептСтрокиТек    = 0; //согласно настройке операции
         АкцептДокументаТек =-1; //не акцептуется
 of  0:
         АкцептСтрокиТек    = 0; //согласно настройке операции
         АкцептДокументаТек = 0; //стандартный акцепт
 of  1:
         АкцептСтрокиТек    = 1; //акцептуется всегда
         АкцептДокументаТек =-1; //не акцептуется
 else    //если не указан(указан неверно) ACPT_REG..., то стандартный акцепт
         АкцептСтрокиТек    = 0; //согласно настройке операции
         АкцептДокументаТек = 0; //стандартный акцепт
}

//Определяем путь к "почтовому ящику" (по умолчанию LOCAL)
select Глобальный_Словарь.Раздел ('ПОЧТОВЫЕ ЯЩИКИ', arg('MAIL.FROM'))
{AFTER Глобальный_Словарь.Раздел.Строка:
  s            = Глобальный_Словарь.Строка.Значение;
  ПочтовыйЯщик = Trim (BasicСтрока.Элемент (s,BasicСтрока.Мощность(s)));
};

if ПочтовыйЯщик = '' //Имя ящика определено неверно (нет в глоб. словаре)
{
  ПочтовыйЯщик=Выбрать.ИзРазделаINI('ПОЧТОВЫЕ ЯЩИКИ','',0,'Почтовые ящики',0,'',1);
  Cancel (ПочтовыйЯщик=NULL);
  SetArg ('MAIL.FROM', ПочтовыйЯщик);
  select Глобальный_Словарь.Раздел ('ПОЧТОВЫЕ ЯЩИКИ', arg('MAIL.FROM'))
  {AFTER Глобальный_Словарь.Раздел.Строка:
    s            = Глобальный_Словарь.Строка.Значение;
    ПочтовыйЯщик = Trim (BasicСтрока.Элемент (s,BasicСтрока.Мощность(s)));
  };
}

КлассДокументов = arg('КЛАСС_ДОКУМЕНТОВ');
if КлассДокументов='' {    //Не  определен тип документов
   ShowErrMessage ('Не определен класс документов|введите в строку меню параметр|КЛАСС_ДОКУМЕНТОВ=...');
   cancel;
}

НаличиеОшибки = 0;
select BasicFile (ПочтовыйЯщик&'\*.*', 1)
{after BasicFile.Файл:
  cancel(BasicFile.Тип != 'КОНТРОЛЬНАЯ ЛЕНТА');
  ФайлИмя = BasicFile.ИмяФайла;
//ShowErrMessage (ФайлИмя);
 after BasicFile.Строка:
  if BasicFile.Строка.Имя = 'ДАТА' {
     ФайлДата = String2Date (BasicFile.Строка.Значение (1));
//     ShowErrMessage (DateString (ФайлДата)&' - '&ФайлИмя);
     add Список_Файлов;
//Break to BasicFile.Файл;
  }

};


//select Список_Файлов {
// after Список_Файлов.Файл:
//  ShowErrMessage (DateString(файлДата)&' - '&ФайлИмя);
//};
//cancel;

СООБЩЕНИЯ.В_ФАЙЛ;
select Список_Файлов {
 after Список_Файлов.Файл:
  Drop КТЛ;
  Drop СписокДокументов;
  Drop СуммыПоВалютам;
  ТипСообщения = '';
//ShowErrMessage (ФайлИмя);
  ОбработаноСтрок = 0;
  select BasicFile (ФайлИмя, 1) {
   after BasicFile.Строка:
    Case BasicFile.Строка.Имя {

     of 'ДАТА':   Дата =  String2Date (BasicFile.Строка.Значение (1));
                  cancel;
     of 'ВРЕМЯ':  Время = String2Time (BasicFile.Строка.Значение (1));
                  cancel;
     of 'КАССА':  Контрагент = BasicFile.Строка.Значение (1);
                  ПолныйКодПартнера = 'КА.' & Контрагент;
                  cancel;
     of 'СЕАНС':  Сопр_Док = BasicFile.Строка.Значение (1);
                  cancel;
     of 'КАССИР': Имя_документа = BasicFile.Строка.Значение (1);
                  cancel;
     of 'ТИП':
                  ТипСообщения = BasicFile.Строка.Значение (1);
                  if ТипСообщения = '' {
                     ShowErrMessage ('Тип кассовой смены: '&Сопр_Док&
                     ' не определен|Данная ККЛ будет пропущена|Определите тип ККЛ "ТИП=ИТОГОВАЯ/ТЕКУЩАЯ"');
                     CANCEL;
                  }
                  call ПоискАналогов;
                  cancel;
     of 'CM':
                  //получено и сдача
                  //ВалютаТип = 0 - наличные (создается документ по Кассе)
                  //ВалютаТип = 1 - кредитки (создается документ по Банку)
                  Операция    = BasicFile.Строка.Значение (4); //код операции
                  ВалютаКод   = BasicFile.Строка.Значение (5); //код валюты
                  КодВалютыКассы=ВалютаКод;
                  ВалютаСумма = BasicFile.Строка.Значение (6);
                  cancel (ВалютаСумма = 0);
                  select Глобальный_Словарь.Раздел ('СООТВЕТСТВИЕ_ВАЛЮТ','') {
                   AFTER Глобальный_Словарь.Раздел.Строка:
                    if Глобальный_Словарь.Строка.Имя = ВалютаКод {  //1=999,0
                       ВалютаКод = BasicСтрока.Элемент (Глобальный_Словарь.Строка.Значение,1);
                       ВалютаТип = BasicСтрока.Элемент (Глобальный_Словарь.Строка.Значение,2);
                       BREAK;
                    }
                  };
//ShowErrMessage ('Получено: код: '&ВалютаКод&' тип: '&ВалютаТип&' сумма: '&ВалютаСумма);
                  add СуммыПоВалютам;
                  cancel;

     of 'CT':
        ОбработаноСтрок = ОбработаноСтрок + 1;
        case ТипСообщения {
         of 'ИТОГОВАЯ':
         of 'ТЕКУЩАЯ':  if ПропуститьСтрок >= ОбработаноСтрок cancel;
        };
        Склад               = BasicFile.Строка.Значение (5);
        Операция            = BasicFile.Строка.Значение (4); //код операции
        Штрихкод            = BasicFile.Строка.Значение (6);
        Количество_Ч        = BasicFile.Строка.Значение (10);
        ЦенаБазУе           = BasicFile.Строка.Значение (7); //Это Цена из Справочника Кассы
        //расчет цен по суммам
        ЦенаУе              = BasicFile.Строка.Значение (8)/Количество_Ч; //действительная
        ЦенаРуб             = BasicFile.Строка.Значение (9)/Количество_Ч; //действительная

        //цены всегда должны быть положительны!!!
        if ЦенаУе < 0 {
           ЦенаУе = -ЦенаУе;
        }
        if ЦенаРуб < 0 {
           ЦенаРуб = -ЦенаРуб;
        }

        ТОВАР.ПРОДАЖНЫЙ_КОД = Штрихкод;
        ТоварКод            = ТОВАР.КОД_ПО_ПРОДАЖНОМУ_КОДУ ;
        if ТоварКод = Null {
           ShowErrMessage ('Нет карточки товара для <'&Товар.Продажный_Код&'> - в кассовой смене: '&Сопр_Док);
           НаличиеОшибки = 1; } //Признак ошибки в смене...
      //////// Проверяем, что у товара есть партионки ////////////////
       if ТоварКод <> Null
       {
         ПартионнаяКарточка = Null;
         ТОВАР.КОД = ТоварКод;
         ТОВАР.КОД =БАЗОВЫЙ_ТОВАР.КОД;
         Select ПартионныеТовары ('',0){
          after ПартионныеТовары.Товар:
           cancel (ТОВАР.ЦЕНА (ARG('ЦЕНА.СЕБЕСТОИМОСТЬ_БЕЗ_НДС_РУБ')) = 0);
           ПартионнаяКарточка=ТОВАР.КОД;
           break;};
      if ПартионнаяКарточка = Null{
       ShowErrMessage ('У товара '&ТОВАР.КОД&'<'&Товар.Продажный_Код&'>'&' нет партионных карточек с ненулевой себестоимостью- в кассовой смене: '&Сопр_Док);
       НаличиеОшибки = 1; }    //Признак ошибки в смене...
      }//if ТоварКод <> Null
     ////////////////////////////////////////////////////////////////
     if НаличиеОшибки = 1
           update Список_Файлов;
     else {
           Tr = Tr + 1;
           //Для ПРОГРЕССА обработка товара УСЛУГА
           //ТОВАР.КОД = ТоварКод;
           //if ТОВАР.ТИП.КОД = 4 Склад = 118;
           //
//sonic
           ШтрихкодКоэф = 1; //ТОВАР.КОЛИЧЕСТВО_В_УПАКОВКЕ;
//sonic
           Количество_Ч = Количество_Ч * ШтрихкодКоэф;
           ЦенаБазУе    = ЦенаБазУе / ШтрихкодКоэф;
           ЦенаУе       = ЦенаУе / ШтрихкодКоэф;
           ЦенаРуб      = ЦенаРуб / ШтрихкодКоэф;
           add КТЛ;
        }
    }
   after BasicFile.Файл.Итого:
    OpenIndicator ('Обработка строк документа', 'Ждите...', 0);
    if ТипСообщения = '' {
       ShowErrMessage('Не определен параметр ТИП в КТЛ,|свяжитесь с разработчиком!');
       Halt;
    }
    call УдалениеДокументов;
    if НаличиеОшибки > 0 {   //если не все документы по смене удалены,
                             //не принимаем эту ККЛ.
      ShowErrMessage ('Ошибка при удалении документов смены: '&Сопр_Док&'|Повторите попытку позже.');
      cancel;
    }

    Select КТЛ {
     after КТЛ.Начало:
      СуммаВалюты = 0;
     after КТЛ.Подразделение:
      Склад = Склад;
     after КТЛ.Операция:
      Call СозданиеДокумента;
     after КТЛ.КЛЮЧЕВОЕПОЛЕ:
      Количество = 0;
     after КТЛ.ТОВАРКОЛИЧЕСТВО:
      //сворачиваем строки с одинаковым штрихкодом и одинаковой ценой
      Количество = Количество + Количество_Ч;
      Cr=Cr+1;
      RunIndicator (Cr, Tr, 'Обработано строк: '&Cr&' из '&Tr);
     after КТЛ.ИтогоПоКлючевомуПолю:
      if Количество <> 0 {
        add Строки;
      }
     after КТЛ.ИтогоПоОперации:
      //добавлять строки только при успешном создании документа!!!
      cancel(FlagComplete = 0); //if док-т не создан, то строки не добавляем
      Call ДобавлениеСтрок;
      // Акцептуем документ
      case ТипСообщения {
        of 'ИТОГОВАЯ': АкцептДокумента = АкцептДокументаИтог;
        of 'ТЕКУЩАЯ':  АкцептДокумента = АкцептДокументаТек;
      }

      МастерСклад    = СКЛАД.КОД;
      МастерТип      = ДОКУМЕНТ.ТИП;
      МастерНомер    = ДОКУМЕНТ.НОМЕР;

      get Список_Файлов;
      cancel (НаличиеОшибки = 1); //if док-т 'РТ' создан с ош., он не
                                  //акцептуется, а бух.док-ты не создаются
      if Upper (ФОРМ_БУХ_ДОК) = 'Y' {
        //Для каждой валюты создаем бухг. документ
        Select СуммыПоВалютам range (Операция) {
         after СуммыПоВалютам.КодВалюты:
         СуммаВалюты=0;
         after СуммыПоВалютам.Сумма:
          СуммаВалюты = СуммаВалюты + ВалютаСумма;

         after СуммыПоВалютам.КодВалютыИтого:
          //Формирование бухгалтерских документов по кассе и банку
          case ВалютаТип {
            of 0: //касса
                 СКЛАД.КОД         = ПодразделениеКасса;
            if СуммаВалюты >0
            {
                 Документ.ТИП      = ТипДокументКассаРеализация;
                 Документ.ОПЕРАЦИЯ = ОперДокументКассаРеализация;
             }
            else
            {
                 Документ.ТИП      = ТипДокументКассаВозврат;
                 Документ.ОПЕРАЦИЯ = ОперДокументКассаВозврат;
            }
            of 1: //банк
                 СКЛАД.КОД         = ПодразделениеБанк;
            if СуммаВалюты >0
            {
                 Документ.ТИП      = ТипДокументБанкРеализация;
                 Документ.ОПЕРАЦИЯ = ОперДокументБанкРеализация;
            }
            else
            {
                 Документ.ТИП      = ТипДокументБанкВозврат;
                 Документ.ОПЕРАЦИЯ = ОперДокументБанкВозврат;
            }
          } //of case
          call СозданиеБухДокумента;
        }; //of СуммыПоВалютам
      }
      НаличиеОшибки = 0; get Список_Файлов;
      if АкцептДокумента = 0 and НаличиеОшибки = 0 {
        RunIndicator (Cr, Tr, 'Акцепт документа: '&ДОКУМЕНТ.НОМЕР);
        //CommandLine ('ВЫПОЛНИТЬ ПРОГРАММА={accept}accept.prg');
        ДОКУМЕНТ.АКЦЕПТОВАТЬ (АКЦЕПТ.РЕЖИМ.СТАНДАРТНЫЙ);

        if !Документ.Акцептован НаличиеОшибки = НаличиеОшибки + 1;
      }

      if НаличиеОшибки = 1 {
         update Список_Файлов;
      }
     after КТЛ.Итого:
      // Удаляем принятый файл, если в нем нет ошибок
      case ТипСообщения {
//        of 'ИТОГОВАЯ': if !НаличиеОшибки Файл.Удалить(ФайлИмя);

        of 'ИТОГОВАЯ': If !НаличиеОшибки Add DelFiles;
        of 'ТЕКУЩАЯ':
      }
    }; //of КТЛ
    //обработка очередного файла (смены) завершена.
    drop КТЛ;
    drop СписокДокументов;
    Tr = 0;
    Cr = 0;
  }; //of BasicFile
 after Список_Файлов.Файл.Итого:
  CloseIndicator;
}; //of Список_Файлов


Select DelFiles {
 After DelFiles.File:
       Файл.Удалить(ФайлИмя);
};


  СООБЩЕНИЯ.ПРОСМОТРЕТЬ;

block ПоискАналогов,#;
#

ДАТА.НАЧАЛЬНАЯ = Дата - 7;
ДАТА.КОНЕЧНАЯ  = Дата + 7;
ПропуститьСтрок = 0;
СКЛАД.ТИП      = 'ТО';
//СКЛАД.КОД      = arg('ТОРГОВЫЕ_ЗАЛЫ');
СКЛАД.КОД      = null; //ищем документы-аналоги на всех складах
ДОКУМЕНТ.ТИП   = КлассДокументов;
select Документы.ПоПодразделению {
 after Документы.ПоПодразделению.Документ:
//  ShowErrMessage (ДОКУМЕНТ.СОПУТСТВУЮЩИЙ_ДОКУМЕНТ.НОМЕР&' = '&Сопр_Док);
  if ДОКУМЕНТ.СОПУТСТВУЮЩИЙ_ДОКУМЕНТ.НОМЕР = Сопр_Док {
//  ShowErrMessage (ДОКУМЕНТ.СОПУТСТВУЮЩИЙ_ДОКУМЕНТ.НОМЕР&' = '&Сопр_Док);
    ПропуститьСтрок  = ДОКУМЕНТ.ПАРАМЕТР.КОД ('LASTLINE');
    Склад            = Склад.Код;
    ДокументТип      = ДОКУМЕНТ.ТИП;
    ДокументОперация = Документ.Операция;
    ДокументНомер    = Документ.Номер;
    add СписокДокументов;
    //поиск связанных (бузгалтерских) документов
    //удаляются из update.prg
//    select Документ.СвязанныеДокументы {
//     after Документ.СвязанныеДокументы.Документ:
//      Склад            = Склад.Код;
//      ДокументТип      = ДОКУМЕНТ.ТИП;
//      ДокументОперация = Документ.Операция;
//      ДокументНомер    = Документ.Номер;
//      add СписокДокументов;
//    }; //of Документ.СвязанныеДокументы
  }
};

block УдалениеДокументов,#;
#
//CANCEL;
НаличиеОшибки = 0;
case ТипСообщения {
 of 'ИТОГОВАЯ':
  Select СписокДокументов {
   after СписокДокументов.Документ:
    Склад.Код = Склад;
    Документ.Тип = ДокументТип;
    Документ.Операция = ДокументОперация;
    Документ.Номер = ДокументНомер;
    FlagComplete = 0;
    Счетчик = 0;
    Loop while (!FlagComplete and (Счетчик < КоличПопыток)) {
     if  ДОКУМЕНТ.АКЦЕПТОВАН FlagComplete = Документ.ДЕАКЦЕПТОВАТЬ (0);
     if !ДОКУМЕНТ.АКЦЕПТОВАН FlagComplete = Документ.УДАЛИТЬ (0);
     if FlagComplete = 0 {Счетчик = Счетчик + 1;}
    } //of FlagComplete
    if FlagComplete = 0 { НаличиеОшибки = 1; //Ошибка хотя бы в одном
       update Список_Файлов;                 //документе - смену пропускаем
    }
  };
 of 'ТЕКУЩАЯ':
} //of case

block СозданиеДокумента,#;
#
//cancel;
СКЛАД.КОД         = СКЛАД;
Документ.ОПЕРАЦИЯ = ОПЕРАЦИЯ;
ДокументОперация  = Операция;
Документ.ТИП      = КлассДокументов;
ДокументТип       = КлассДокументов;
Документ.НОМЕР    = NULL;
ДокументНомер   = NULL;


//ищем в выборке "СписокДокументов" документ на данном подразделении,
//совпадающий с номером смены по данной операции
get СписокДокументов;

//ShowErrMessage (Склад&' = '&дОКУмЕНТТип&' = '&ДокументОперация&' = '&ДокументНОМЕР);
//cancel;

case ТипСообщения {
 of 'ИТОГОВАЯ':
  //Цикл, если изменения документа не сохранены
  FlagComplete = 0;
  Счетчик = 0;
  Loop while (!FlagComplete and (Счетчик < КоличПопыток)) {
//ShowOkMessage (Счетчик);
    Документ.НАЧАТЬ_ИЗМЕНЕНИЯ (InsertRecord);
    if ДокументНомер != NULL ДОКУМЕНТ.РЕДАКТОР.НОМЕР (ДокументНомер);
    Документ.РЕДАКТОР.ДАТА  (Дата);
    Документ.РЕДАКТОР.ВРЕМЯ (Время);
    Документ.РЕДАКТОР.КОНТРАГЕНТ.КОД_РЕГИОНА ('КА');
    Документ.РЕДАКТОР.КОНТРАГЕНТ.КОД (Контрагент);
    Документ.РЕДАКТОР.ИМЯ (Имя_Документа);
    Документ.РЕДАКТОР.СОПУТСТВУЮЩИЙ_Документ.НОМЕР (Сопр_Док);
    ДОКУМЕНТ.РЕДАКТОР.СОПУТСТВУЮЩИЙ_ДОКУМЕНТ.ДАТА (Дата);
    FlagComplete = Документ.ЗАВЕРШИТЬ_ИЗМЕНЕНИЯ (-1);
//ShowOkMessage ('FlagComplete'&' - '&FlagComplete);
//ShowOkMessage ('ДОКУМЕНТ.НОМЕР'&' - '&ДОКУМЕНТ.НОМЕР);
    if FlagComplete = 0 {ДОКУМЕНТ.ОТМЕНИТЬ_ИЗМЕНЕНИЯ;Счетчик=Счетчик+1;}
  }    //of FlagComplete
  //
 of 'ТЕКУЩАЯ':
  if ДокументНомер = NULL {
    //Цикл, если изменения документа не сохранены
    FlagComplete = 0;
    Счетчик = 0;
    Loop while (!FlagComplete and (Счетчик < КоличПопыток)) {
      Документ.НАЧАТЬ_ИЗМЕНЕНИЯ (InsertRecord);
      Документ.РЕДАКТОР.ДАТА  (Дата);
      Документ.РЕДАКТОР.ВРЕМЯ (Время);
      Документ.РЕДАКТОР.КОНТРАГЕНТ.КОД_РЕГИОНА ('КА');
      Документ.РЕДАКТОР.КОНТРАГЕНТ.КОД (Контрагент);
      Документ.РЕДАКТОР.ИМЯ (Имя_Документа);
      Документ.РЕДАКТОР.СОПУТСТВУЮЩИЙ_Документ.НОМЕР (Сопр_Док);
      ДОКУМЕНТ.РЕДАКТОР.СОПУТСТВУЮЩИЙ_ДОКУМЕНТ.ДАТА (Дата);
      Документ.РЕДАКТОР.ПАРАМЕТР.КОД (37,,ТипСообщения);
      Документ.РЕДАКТОР.ПАРАМЕТР.КОД ('LASTLINE',,ОбработаноСтрок);
      FlagComplete = Документ.ЗАВЕРШИТЬ_ИЗМЕНЕНИЯ (-1);
      if FlagComplete = 0 {ДОКУМЕНТ.ОТМЕНИТЬ_ИЗМЕНЕНИЯ;Счетчик=Счетчик+1;}
    }    //of FlagComplete
    if FlagComplete = 0 {
       НаличиеОшибки = 1;     //Признак ошибки в смене...
       update Список_Файлов;
       ShowErrMessage ('Ошибка создания документа: '&Сопр_Док&'. Повторите прием почты!!!');
    }

  }
 else {
   //Цикл, если изменения документа не сохранены
   ДОКУМЕНТ.НОМЕР = ДокументНомер;
   FlagComplete = 0;
   Счетчик = 0;
   Loop while (!FlagComplete and (Счетчик < КоличПопыток)) {
     Документ.НАЧАТЬ_ИЗМЕНЕНИЯ (ChangeRecord);
     Документ.РЕДАКТОР.ПАРАМЕТР.КОД ('LASTLINE',,ОбработаноСтрок);
     FlagComplete = Документ.ЗАВЕРШИТЬ_ИЗМЕНЕНИЯ (-1);
     if FlagComplete = 0 {ДОКУМЕНТ.ОТМЕНИТЬ_ИЗМЕНЕНИЯ;Счетчик=Счетчик+1;}
   }    //of FlagComplete
   if FlagComplete = 0 {
      НаличиеОшибки = 1;     //Признак ошибки в смене...
      update Список_Файлов;
      ShowErrMessage ('Ошибка изменения документа: '&Сопр_Док&'.|Повторите попытку позже.');
   }
  }
} //of CASE

block ДобавлениеСтрок,#;
#

//ShowErrMessage ('ДобавлениеСтрок');

case ТипСообщения {
  of 'ИТОГОВАЯ': АкцептСтроки = АкцептСтрокиИтог;
  of 'ТЕКУЩАЯ':  АкцептСтроки = АкцептСтрокиТек;
}

FlagComplete = 0;
Select Строки {
  after Строки.Строка:
  // Записываем в документ строку
  //Цикл, если изменения строки не сохранены
  Счетчик = 0;
  Loop while (!FlagComplete and (Счетчик < КоличПопыток)) {
    СТРОКА.НАЧАТЬ_РЕДАКТИРОВАНИЕ (InsertRecord);
    СТРОКА.РЕДАКТОР.ТОВАР (ТоварКод);
    СТРОКА.РЕДАКТОР.КОЛИЧЕСТВО (1, Количество);
    // Пишем те цены, которые нужны
    if БАЗОВАЯ_ВАЛЮТА_КАССЫ = ARG('РУБ')
       ЦенаВрем=ЦенаБазУе;
    else
       ЦенаВрем=ЦенаБазУе*Курс(БАЗОВАЯ_ВАЛЮТА_КАССЫ,ARG('РУБ'),Дата,Время);

    if ЦенаВрем  СТРОКА.РЕДАКТОР.ЦЕНА (9,ЦенаВрем);

    if БАЗОВАЯ_ВАЛЮТА_КАССЫ = ARG('УЕ')
       ЦенаВрем=ЦенаУе;
    else
       ЦенаВрем=ЦенаУе*Курс(БАЗОВАЯ_ВАЛЮТА_КАССЫ,ARG('УЕ'),Дата,Время);

       if ЦенаВрем     СТРОКА.РЕДАКТОР.ЦЕНА (3,ЦенаВрем);

       ЦенаВрем=ЦенаРуб;
    if ЦенаВрем    СТРОКА.РЕДАКТОР.ЦЕНА (4,ЦенаВрем);
//ShowErrMessage ('3 '&ТоварКод&' '&ЦенаБазУе&' '&ЦенаУЕ&' '&ЦенаРуб);
//ShowErrMessage (' ЦЕНА(3)= '&Округлить(ЦенаУе*Курс(БАЗОВАЯ_ВАЛЮТА_КАССЫ,ARG('УЕ'),Дата,Время),ВидОкр));
//ShowErrMessage ('Дата= '&DateString (Дата)&' Время= '&TimeString (Время));
//ShowErrMessage ('БАЗОВАЯ_ВАЛЮТА_КАССЫ='&БАЗОВАЯ_ВАЛЮТА_КАССЫ&' ARG("УЕ")= '&ARG('УЕ'));
    СТРОКА.РЕДАКТОР.ПАРАМЕТР ('BAR',,Штрихкод);
    FlagComplete = СТРОКА.СОХРАНИТЬ (АкцептСтроки);
    if FlagComplete = 0 {СТРОКА.ОТМЕНИТЬ_ИЗМЕНЕНИЯ;Счетчик=Счетчик+1;}
  }
  if FlagComplete = 0 {
     НаличиеОшибки = 1;     //Признак ошибки в смене...
     update Список_Файлов;
     ShowErrMessage ('Ошибка добавления строки: '&Сопр_Док&'. Повторите прием почты!!!');
  }
  FlagComplete = 0;
};
drop Строки;

block СозданиеБухДокумента,#;
#
cancel (СуммаВалюты = 0 OR СуммаВалюты = Null );
if СуммаВалюты < 0 СуммаВалюты =-СуммаВалюты;
Документ.НОМЕР    = NULL ;
FlagComplete = 0;
Счетчик = 0;

// Определяем правильный номер документа
ПодчНомер = '0';
 ДАТА.НАЧАЛЬНАЯ =Null;
 ДАТА.КОНЕЧНАЯ  = CurrentDate ;
  select Документы.ПоПодразделению (Документ.Тип,,Склад.Код,1) {
  after Документы.ПоПодразделению.Документ:
  cancel Slen(ДОКУМЕНТ.НОМЕР) <> 8;
  cancel (Sub(ДОКУМЕНТ.НОМЕР,1,2) != Sformat(МастерСклад,'N02__'));
    if ДОКУМЕНТ.НОМЕР > ПодчНомер
     ПодчНомер = ДОКУМЕНТ.НОМЕР;
     };
ПодчНомер = Sub (ПодчНомер,3,6) + 1;
ПодчНомер = Sformat(МастерСклад,'N02__')&Sformat(ПодчНомер,'N06__');
//
Loop while (!FlagComplete and (Счетчик < КоличПопыток)) {
  Документ.НАЧАТЬ_ИЗМЕНЕНИЯ (InsertRecord);
  Документ.РЕДАКТОР.НОМЕР (ПодчНомер);
  Документ.РЕДАКТОР.ДАТА  (Дата);
  Документ.РЕДАКТОР.ВРЕМЯ (Время);
  Документ.РЕДАКТОР.КОНТРАГЕНТ.КОД_РЕГИОНА ('КА');
  Документ.РЕДАКТОР.КОНТРАГЕНТ.КОД (Контрагент);
  ДОКУМЕНТ.РЕДАКТОР.ПАРАМЕТР.КОД (20,,СуммаВалюты);
  ДОКУМЕНТ.РЕДАКТОР.ПАРАМЕТР.КОД (26,,КодВалютыКассы);
  ДОКУМЕНТ.РЕДАКТОР.ПАРАМЕТР.КОД (27,,ВалютаКод);
  ДОКУМЕНТ.РЕДАКТОР.ПАРАМЕТР.КОД (503,,Сопр_Док);
  FlagComplete = Документ.ЗАВЕРШИТЬ_ИЗМЕНЕНИЯ (-1);
  if FlagComplete = 0 {ДОКУМЕНТ.ОТМЕНИТЬ_ИЗМЕНЕНИЯ;
                       Счетчик=Счетчик+1;}
    else ДОКУМЕНТ.АКЦЕПТОВАТЬ (АКЦЕПТ.РЕЖИМ.СТАНДАРТНЫЙ);
}    //of FlagComplete
if FlagComplete = 0 {
   ShowErrMessage ('Ошибка при создании бух.документа по смене: '&Сопр_Док);
   НаличиеОшибки = 1;     //Признак ошибки в смене...
   update Список_Файлов;
  }
 else {
   ДОКУМЕНТ.УстановитьСвязь (МастерТип, МастерСклад, МастерНомер, arg('СВЯЗЬ.ТОВ_ДОК-БУХ_ДОК'));
}

СуммаВалюты = 0;
